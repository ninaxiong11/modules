nextflow_workflow {
    name "Test Subworkflow FASTQ_GENERATE_STATISTICS"
    script "../main.nf"
    workflow "FASTQ_GENERATE_STATISTICS"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/fastq_generate_statistics"
    tag "fastqc"
    tag "seqfu"
    tag "seqfu/check"
    tag "seqfu/stats"
    tag "seqkit"
    tag "seqkit/stats"
    tag "seqtk"
    tag "seqtk/comp"

    test("sarscov2 - fastq - single_end") {
        when {
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test_single', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                ])
                input[1] = false
                input[2] = false
                input[3] = false
                input[4] = false
                input[5] = false
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    file(workflow.out.fastqc_html[0][1]).name,
                    file(workflow.out.fastqc_zip[0][1]).name,
                    workflow.out.seqfu_check,
                    workflow.out.seqfu_stats,
                    workflow.out.seqfu_multiqc,
                    workflow.out.seqkit_stats,
                    workflow.out.seqtk_stats,
                    workflow.out.versions
                ).match() }
            )
        }
    }
    test("sarscov2 - fastq - paired_end") {
        when {
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test_paired', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = false
                input[2] = false
                input[3] = false
                input[4] = false
                input[5] = false
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    file(workflow.out.fastqc_html[0][1][0]).name,
                    file(workflow.out.fastqc_zip[0][1][0]).name,
                    file(workflow.out.fastqc_html[0][1][1]).name,
                    file(workflow.out.fastqc_zip[0][1][1]).name,
                    workflow.out.seqfu_check,
                    workflow.out.seqfu_stats,
                    workflow.out.seqfu_multiqc,
                    workflow.out.seqkit_stats,
                    workflow.out.seqtk_stats,
                    workflow.out.versions
                ).match() }
            )
        }
    }
    test("sarscov2 - fastq - single_end - stub") {

        options "-stub"

        when {
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test_single', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                ])
                input[1] = false
                input[2] = false
                input[3] = false
                input[4] = false
                input[5] = false
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out,
                    workflow.out.versions.collect{ path(it).yaml }.unique()
                ).match() }
            )
        }
    }
    test("sarscov2 - fastq - paired_end - stub") {

        options "-stub"

        when {
            workflow {
                """
                input[0] = Channel.of([
                    [ id:'test_paired', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ])
                input[1] = false
                input[2] = false
                input[3] = false
                input[4] = false
                input[5] = false
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out,
                    workflow.out.versions.collect{ path(it).yaml }.unique()
                ).match() }
            )
        }
    }
}
