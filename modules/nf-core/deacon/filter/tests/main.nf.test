nextflow_process {

    name "Test Process DEACON_FILTER"
    script "../main.nf"
    process "DEACON_FILTER"

    tag "modules"
    tag "modules_nfcore"
    tag "deacon"
    tag "deacon/filter"
    tag "deacon/index"

    test("sarscov2 - fastq - single-end") {

        setup {
            run("DEACON_INDEX") {
                script "../../index/main.nf"
                process {
                    """
                    input[0] = [
                                [ id:'test', single_end:true ], // meta map
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                filter_fastq_ch = Channel.of(
                    [
                        [ id:'test', single_end:true ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                    ]
                )
                input[0] = DEACON_INDEX.out.index.join(filter_fastq_ch)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.log[0][1]).name,
                    process.out.fastq_filtered,
                    process.out.versions.collect { path(it).yaml }
                ).match()}
            )
        }

    }

    test("sarscov2 - fastq - paired-end") {

        setup {
            run("DEACON_INDEX") {
                script "../../index/main.nf"
                process {
                    """
                    input[0] = [
                                [ id:'test', single_end:false ], // meta map
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                filter_fastq_ch = Channel.of(
                    [
                        [ id:'test', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                        ]
                    ]
                )
                input[0] = DEACON_INDEX.out.index.join(filter_fastq_ch)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.log[0][1]).name,
                    process.out.fastq_filtered
                ).match()},
                { assert snapshot(process.out.versions).match("versions") }
            )
        }

    }

    test("sarscov2 - fastq - single-end - stub") {

        options "-stub"

        setup {
            run("DEACON_INDEX") {
                script "../../index/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test', single_end:true ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    ]
                    """
                }
            }
        }

        when {
            process {
                """
                filter_fastq_ch = Channel.of(
                    [
                        [ id:'test', single_end:true ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                    ]
                )
                input[0] = DEACON_INDEX.out.index.join(filter_fastq_ch)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out,
                    process.out.versions.collect { path(it).yaml }
                ).match()}
            )
        }
    }

}
